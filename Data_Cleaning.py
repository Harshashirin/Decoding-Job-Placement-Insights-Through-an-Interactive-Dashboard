# -*- coding: utf-8 -*-
"""data_cleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1krdfT4aDJiaasNudWS_2d3Iq0Xjf8G0-

**IMPORTING** **LIBRARIES** **AND** **DATA**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv('/content/cleaned_data - cleaned_data.csv.csv')

"""**DATA UNDERSTANDING**"""

data.head()

data['City'].value_counts()

data['District'].value_counts()

data['Qualification'].nunique()

data['Qualification'].value_counts()

data.info()

data.describe()

data.shape

data.isna().sum()

"""**DATA CLEANING**"""

#Since both the 'City' and 'District' columns contain identical values, it is necessary to drop one of them.
data.drop('District',axis=1,inplace=True)

#Dropping the column 'Candidate Name' because it contains unique values.
data.drop('Candidate Name',axis=1,inplace=True)

#verifying
data.head()

#missing values visualization
import missingno as msno
msno.matrix(data)
plt.figure(figsize=(15,9))
plt.show()

def get_numerical_summary(data):
  total=data.shape[0]
  missing_cols=[col  for col in data.columns if data[col].isnull().sum()>0]
  missing_percentage={}

  for col in missing_cols:
    null_count=data[col].isnull().sum()
    per=(null_count/total)*100
    missing_percentage[col]=per
    print(f'{col}:{null_count},({round(per,3)})')
  return missing_percentage

miss_per =get_numerical_summary(data)

"""***Handling missing values (Imputing method)***


"""

#imputing numerical column
##considering the column 'Age'
freqgraph=data.select_dtypes(include=['float'])
freqgraph.hist(figsize=(10,5))
plt.show()

data['Age']=data['Age'].fillna(data['Age'].median())

#imputing categorical columns
for col in ['Gender','Qualification', 'City','Skills',
            'Placement Status','Robotic interview']:
       data[col]=data[col].fillna(data[col].mode()[0])

data.isna().sum()

#considering the column' Qualification'

data.Qualification.value_counts()

data.Qualification.nunique()

data['Qualification'].unique()

# List unique values containing 'Commerce and Accounting Stream'
Commerce_values =[   'Bachelor Of Commerce','Bachelor Of Commerce (Professional)','Master Of Commerce','Intermediate Commerce (ICom)',
                     'Bachelor Of Commerce (Honours)','Associate Chartered Accountants',
                     'Chartered Accountancy (Final)','Institute Of Cost and Works Accountants (Inter)',
                     'Associates Of Cost and Management Accountants','Chartered Engineer','Institute Of Cost and Works Accountants (Final)',
                     'Chartered Accountancy (Inter)','Bachelor Of Commerce','Bachelor Of Commerce (Professional)',
                     'Bachelor Of Commerce and Bachelor Of Legislative Law (Hons.)','Master Of Commerce','Intermediate Commerce (ICom)',
                     'Bachelor Of Commerce (Honours)','Doctorate In Commerce','Post Doctoral - Commerce','National Diploma In Commerce']

data['Qualification'] = data['Qualification'].apply(lambda x: 'Commerce and Accounting Stream' if x in Commerce_values else x)

#Get unique values containing 'Science'
science_unique_values = data[data['Qualification'].str.contains('Science', case=False, na=False)]['Qualification'].unique()
print(science_unique_values)

# Replace values containing 'Science' with 'Science Stream'
data['Qualification'] = data['Qualification'].apply(lambda x: 'Science Stream' if 'Science' in x else x)

#verify
science_unique_values = data[data['Qualification'].str.contains('Science', case=False, na=False)]['Qualification'].unique()

print(science_unique_values)

# List of values to group into 'Computer Stream'
computer_values = [
    'Post Graduate Diploma In Computer Application',
    'Diploma In Computer Application and Business Management',
    'Bachelor Of Computer Applications',
    'Diploma In Computer Applications',
    'Diploma In Computer Hardware and Networking','Computer Operator and Programming Assistant (IT & ITES Sector)',
    'Computer Diploma','Computer Hardware & Network Maintenance (IT & ITES Sector)',
    'Master Of Computer Application','Diploma In Computer Office Management',
    'Computer Certificate','Advanced Diploma In Computer Software Technology',
    'Desktop Publishing Operator (IT & ITES Sector)',
    'Computer TTC','Computer Aided Embroidery And Designing (Apparel Sector)',
    'Master Of Computer Applications (Integrated)',
    'Diploma In Computer Application and Management',
    'Computer Awareness','Diploma In Computer Management','IT Sector BBBT & Computer Networking(IT Sector (COE) Sector)',
    'Information Communication Technology System Maintenance (IT & ITES Sector)',
    'Geo Informatics Assistant (IT & ITES Sector)',
    'Diploma In Software Systems','IT Sector BBBT & Repair & Maintenance of Hardware of Computer & Peripheral(IT Sector (COE) Sector)',
    'Mechanic Computer Hardware(IT & ITES Sector)',
    'Information Technology (IT & ITES Sector)','Software Testing Assistant(IT & ITES Sector)',
    'Apparel BBBT & Computer Aided Pattern Making(Apparel (COE) Sector)',
    'Desktop Publishing Operator (VISUALLY IMPAIRED) (IT & ITES Sector)','Data Base System Assistant (IT & ITES Sector)',
    'Post Graduate Diploma In Computer Management','Computer Operator and Programming Assistant  (VISUALLY IMPAIRED) (IT & ITES Sector)',
    'IT Sector BBBT & E-Accountancy & Office Management(IT Sector (COE) Sector)','IT Sector BBBT & Information System Management(IT Sector (COE) Sector)',
    'Master Of Computer Management','Data Entry Operator (IT & ITES Sector)',
    'AIE','Active Intelligence Visualization','Data Entry Operator (IT & ITES Sector)']

# Replace the specific values with 'Computer Stream'
data['Qualification'] = data['Qualification'].apply(lambda x: 'Computer Stream' if x in computer_values else x)

#verify
data.Qualification.value_counts()

# List of values to group into 'Arts Stream'
arts_values = [
    'Bachelor Of Arts', 'Master Of Arts (Economics)', 'Bachelor Of Arts (Economics)', 'Master Of Arts',
    'Master Of Social Work', 'Bachelor Of Arts (Sociology)', 'Bachelor Of Education',
    'Bachelor Of Arts (Vocational Course)', 'Bachelor Of Arts (Honours)', 'Bachelor Of Art Education (Honours)',
    'Bachelor Of Applied Arts', 'Bachelor Of Arts (Education)', 'Master Of Arts (Sociology)',
    'Bachelor Of Psychology', 'Master Of Arts In Dance', 'Master Of Arts In Education',
    'Bachelor Of Arts and MasBachelor Of Arts', 'Bachelor Of Literature', 'Master Of Performing Arts',
    'Bachelor Of Arts (Ed.Deaf)', 'Masters In Human Resource Management', 'Doctorate In Arts',
    'Bachelor Of Adult Education', 'Bachelor Of Music', 'Master Of Literature', 'Doctor Of Literature',
    'Master Of education', 'Post Doctoral - Arts', 'Master Of Business Economics', 'Bachelor Of Visual Arts',
    'Bachelor Of Fashion Technology', 'Bachelor Of Fine arts', 'Intermediate Arts (IA)', 'Bachelor Of Fine arts',
    'Diploma In Fine Arts', 'Master Of Fine Arts', 'National Diploma In Fine Arts', 'Bachelor Of Arts (Sastri)',
    'Bachelor Of Teaching', 'Bachelor Of Physical Education', 'Bachelor Of Theatre Arts', 'Doctorate In Education',
    'Bachelor Of Dramatics', 'Master Of Fine Arts', 'Bachelor Of Dance', 'Bachelor Of Performing Arts','Bachelor Of Social Work',
    'Master Of Music', 'Vidvanmadhyama (Ba)', 'Doctor Of Music'
]
# Replace specific values in 'Qualification' column with 'Arts Stream'
data['Qualification'] = data['Qualification'].apply(lambda x: 'Arts Stream' if x in arts_values else x)

# List of values to group into 'Medical Stream'
medical_values = [
    'Bachelor Of Pharmacy', 'Bachelor Of Ayurvedic Medicine and Surgery', 'Diploma In Radiological Technology',
    'Diploma In Medical Pathology and Bacteriology', 'Ayurvedacharya', 'Diploma In Nursing (General Nursing Midwifery)',
    'Diploma In Nursing (Auxiliary Nursing Midwifery)', 'Diploma In Pharmacy', 'Bachelor In Hospital Administration',
    'Diploma In Medical Laborotary Technician', 'Doctor Of Medicine (Ay)', 'Bachelor Of Homeopathic Medicine and Surgery',
    'Bachelor of Medical Laboratory Technology', 'Bachelor Of Medicine and Bachelor Of Surgery',
    'Diploma In Opthalmic Assistant', 'Doctor Of pharmacy', 'Bachelor Of Dental Surgery', 'Diploma Medicine',
    'Diploma In Ayurveda Pharmacist Course', 'Diploma In Medical Radiology and Electrology',
    'Bachelor Of Radiation and Imaging Technology', 'Diploma In X-Ray Technician', 'Advanced Diploma In Medical Bio - Chemistry',
    'Diploma In Medical And Social Psychology', 'Health Safety & Environment (Healthcare Sector)', 'Diploma Paramedical',
    'Bachelor Of Physiotherapy', 'Bachelor In Prosthetics and Orthotics', 'Diploma In Health Education', 'Master Of Philosophy',
    'Diploma Paramedical (Pvt)', 'Diploma In Anaesthesiology', 'Bachelor Of Nursing', 'Doctor Of Philosophy', 'Master Of Pharmacy',
    'Bachelor In Cardio Vascular Technology', 'Diploma In Occupational Therapy', 'Doctor Of Medicine',
    'Diploma In Tuberculosis and Respiratory Diseases', 'Health Inspector Course', 'Master Of Dental Surgery',
    'Master Of Physiotherapy', 'Medical Radiological Technology', 'Diploma In Dental Mechanic',
    'Masters In Counselling And Psychotherapy', 'Diploma In Health Care Assistant',
    'Master Of Audiology and Speech Language Pathology', 'Master Of Public Health', 'Diploma In Medical Radiology',
    'Master Of Nursing', 'Diploma In Medical Radiotherapy', 'Diploma In Physical medicine', 'Diploma In Medical Psychology',
    'Bachelor Of Veterinary and Animal Health', 'Doctorate In Medicine', 'Diploma In Ophthalmic Medicine and Surgery',
    'Diploma In Medical Radioisotope Techniques', 'Master Of Surgery (Ayurveda)', 'Diploma In Ayurveda Medicine',
    'Diploma In Ophthalmology', 'Master Of Community Health','Doctorate In Ayurveda','Bachelor Of Medicine (Homeo)',
    'Bachelor Of Siddha Medicine and Surgery','Doctorate Of Medicine','Counselling'

]
#Replace specific values in 'Qualification' column with 'Medical Stream'
data['Qualification'] = data['Qualification'].apply(lambda x: 'Medical Stream' if x in medical_values else x)

# Filter and print unique values containing the word 'Technician' from the 'Qualification' column
technician_values = data[data['Qualification'].str.contains('Technician', case=False, na=False)]['Qualification'].unique()

# Print the unique 'Technician' values
print(technician_values)

# List of values to group into 'Diploma Courses'
Diploma_values = ['Diploma Engineering', 'Diploma in Electronics',
                      'Diploma In Personnel Management Or Administration', 'Diploma Others',
                      'Diploma In Education', 'Diploma In Craftsmanship (Civil/Surveyor)',
                      'Higher Diploma In Co-Operation And Business Management',
                      'Diploma in Mechanical Engineering',
                      'Diploma In Indian And Foreign Accounting', 'Advanced Diploma',
                      'Diploma In Architecture', 'A-Level (Diploma)',
                      'Diploma in Tool and Die Engineering',
                      'Post Graduate Diploma In Management',
                      'Diploma in Electronics and Communication',
                      'Diploma In Biomedical engineering', 'Higher Diploma In cooperation',
                      'Diploma In Elementary Education', 'Diploma In Commercial Practice',
                      'Diploma In Fashion And Designing', 'Diploma In Operation Theatre Technology',
                      'Diploma In Short Hand And Typewriting', 'Diploma In Craftsmanship (Electrical)',
                      'Diploma In Rail Transport Management', 'Diploma In Hotel Management',
                      'Diploma In Secretarial Practice', 'Advance Hindi Diploma',
                      'Diploma In Laboratory Techniques', 'P.G.Diploma',
                      'Advanced Diploma In Fashion Designing',
                      'Diploma In Computerised Financial Management',
                      'Diploma In Special Education',
                      'Advance post Graduate Diploma In Computer Application',
                      'Post Graduate Diploma In Hospital Management',
                      'Diploma In Dairy Husbandry',
                      'Diploma In Industrial Psychology Or Relations',
                      'Diploma In Dialysis Technology', 'Higher Diploma In Cooperative Management',
                      'Professional Diploma', 'Junior Diploma In cooperation',
                      'Diploma In Multimedia and Animation', 'Post Graduate Diploma In Business Administration',
                      'Post Graduate Diploma In Cyber Security',
                      'Diploma In Rehabilitation Technology', 'Diploma Of Vocation',
                      'Diploma In Refrigeration And Air Conditioning',
                      'Diploma In Blood Banking Technology', 'B-Level (Diploma)',
                      'Post P.G.Diploma', 'Diploma In Textile Technology',
                      'Post Graduate Diploma In Information Technology',
                      'Post Graduate Diploma In Sports Medicine', 'Diploma In Drawing And Painting',
                      'Diploma In Film Technology', 'Diploma In Financial Management',
                      'Diploma In Alternative Medical System', 'Diploma In Craftsmanship Tailoring Etc',
                      'Diploma In Office Automation', 'Diploma In Language Education',
                      'Diploma In Food Production', 'Post Graduate Diploma In Business Management',
                      'Post Diploma In Software Engineering', 'Post Basic Diploma-Pg Diploma',
                      'Post Graduate Diploma In Operations Management',
                      'Diploma In Hearing Language And Speech',
                      'Diploma In Social Service Administration',
                      'Diploma in fire & safety Engineering(Safety and Security Sector)',
                      'Post Diploma', 'Post Basic Diploma',
                      'Post Graduate Diploma In Diploma in Electronics',
                      'Diploma In Maternity and Child Welfare (DMCW)',
                      'Diploma In Handloom Technology', 'Diploma In Theology',
                      'Diploma In Physical Medicine and Rehabilitation',
                      'National Diploma In Sculpture', 'Diploma In Dairy Technology',
                      'Diploma Agriculture and Allied Technology', 'Diploma In Social Work',
                      'Post Graduate Diploma In International Business',
                      'Diploma In Special Education (Hearing Impairment)',
                      'Diploma In Child Health', 'National Diploma In Painting',
                      'Diploma In Special Education (Mental Retardation)', 'Diploma In Mining',
                      'Diploma In New born', 'Diploma In Rural Service',
                      'Diploma In Oriental Librarianship','Diploma In Elementary Eucation']

#Replace specific values in 'Qualification' column with 'Diploma Courses'
data['Qualification'] = data['Qualification'].apply(lambda x: 'Diploma Courses' if x in Diploma_values else x)

# List of all values to group into Mechanics and Electronics
values = [
    'Technician Power Electronics System (Electronics & Hardware Sector)', 'Diploma in Electronics',
    'Draughtsman (Civil) (Construction Sector)', 'Bachelor Of Technology (Electronics)',
    'Electrician Power Distribution (Power Sector)', 'SSE', 'Fitter (Capital Goods & Manufacturing Sector)',
    'Diploma in Mechanical Engineering', 'Machinist (Grinder) (Capital Goods & Manufacturing Sector)',
    'Additive Manufacturing Technician (3d Printing)(Capital Goods & Manufacturing Sector)',
    'Electrician (Power Sector)', 'Automobile BBBT & Servicing & Overhauling of Automobile (Petrol)(Automobile (COE) Sector)',
    'Electrical BBBT & Repair And Maintenance of Domestic Appliances(Electrical(COE) Sector)',
    'Diploma in Electronics and Communication', 'Electronics Mechanic (Electronics & Hardware Sector)',
    'Lift and Escalator Mechanic (Power Sector)', 'Mechanic Diesel (Automotive Sector)',
    'Welder (Structural) (Capital Goods & Manufacturing Sector)', 'Mechanic Auto Electrical and Electronics (Automotive Sector)',
    'Mechanic Motor Vehicle (Automotive Sector)', 'Mechanic Lens/Prism Grinding (Capital Goods & Manufacturing Sector)',
    'Plumber (Plumbing Sector)', 'Electrical BBBT & Repair And Maintenance of instruments USED IN ELECTRICAL ENGINEERING(Electrical(COE) Sector)',
    'Automobile BBBT & Denting - Painting & Welding of Auto mobiles(Automobile (COE) Sector)',
    'Welder (Capital Goods & Manufacturing Sector)', 'Diploma In Craftsmanship (Electrical)',
    'Mechanic (Tractor) (Automotive Sector)', 'Wireman (Power Sector)', 'Bachelor Of Electrical Engineering',
    'Electronics BBBT & Radio,Audio ,Video System and Appliances(Electronics (COE) Sector)',
    'Instrument Mechanic (Chemical Plant) (Chemicals And Petrochemicals Sector)',
    'Refrigeration And Air Conditioning Technician(Capital Goods & Manufacturing Sector)',
    'Electrical-Power Distribution(Power Sector)', 'Solar Technician (Electrical) (Power Sector)',
    'BBBT Only Passed(Automobile (COE) Sector)', 'Automobile BBBT & Auto Electronics & Air conditioning in Automobile(Automobile (COE) Sector)',
    'PUC', 'Diploma In Dairy Husbandy', 'Automobile BBBT & Servicing & Overhauling of Automobile (Diesel)(Automobile (COE) Sector)',
    'BBBT Only Passed(Electrical(COE) Sector)', 'Driver Cum Mechanic (Automotive Sector)',
    'Electrical BBBT & Repair&Maintenance of machine&power supply(Electrical(COE) Sector)',
    'Master In Business Studies', 'Mechanic Agriculture Machinery (Automotive Sector)',
    'Instrument Mechanic (Electronics & Hardware Sector)',
    'Automobile BBBT & Overhauling of Fuel injection system & Steering mechanism(Automobile (COE) Sector)',
    'Electronics BBBT & Communication system embeded system and PLC(Electronics (COE) Sector)',
    'Technician Medical Electronics(Electronics & Hardware Sector)',
    'Agriculture Machinery BBBT & Repair and Maintenance of post Harvesting Machines / Processing Machines(Agriculture Machinery (COE) Sector)',
    'Technician Electronics System Design & Repair (Electronics & Hardware Sector)',
    'Electrical BBBT & Operation And Maintenance of equipments Used in HT,LT, Sutstation and cable jointing(Electrical(COE) Sector)',
    'Electrical BBBT & NON Coventional power generation,Batteryand inverter(Electrical(COE) Sector)',
    'IoT Technician (Smart City)(IT & ITES Sector)', 'Mechanic Consumer Electronics Appliances (Electronics & Hardware Sector)',
    'Technician Mechatronics (Capital Goods & Manufacturing Sector)',
    'Agriculture Machinery BBBT & Operation repair and Maintenance of Crop Production Machinery(Agriculture Machinery (COE) Sector)',
    'Draughtsman (Mechanical) (Capital Goods & Manufacturing Sector)', 'Smartphone Technician Cum App Tester (Electronics & Hardware Sector)',
    'Mechanic Auto Body Repair (Automotive Sector)',
    'Electronics BBBT & Inverters,Ups,Voltage Stabilizers and Industrial Drives(Electronics (COE) Sector)',
    'Mechanic Electric Vehicle (Automotive Sector)',
    'Mechanic Cum Operator Electronics Communication System(Electronics & Hardware Sector)',
    'Mechanic Radio And Television(Electronics & Hardware Sector)',
    'Agriculture Machinery BBBT & Repair and Maintenance of Overhauling of Tractors(Agriculture Machinery (COE) Sector)',
    'Mechanic Consumer Electronics(Electronics & Hardware Sector)',
    'Agriculture Machinery BBBT & Repair and Maintenance of Harvesting Machines(Agriculture Machinery (COE) Sector)',
    'Mechanic Industrial Electronics(Electronics & Hardware Sector)', 'Post Graduate Diploma In Diploma in Electronics',
    'Mechanic Auto Body Painting (Automotive Sector)', 'Fibre To Home Technician(Telecom Sector)',
    'Maintenance Mechanic (Chemical Plant) (Chemicals And Petrochemicals Sector)',
    'BBBT Only Passed(Electronics (COE) Sector)', 'Mechanic Medical Electronics(Electronics & Hardware Sector)',
    'Network Technician(IT & ITES Sector)', 'Mechanic Two & Three Wheeler (Automotive Sector)',
    'Pump Operator-Cum-Mechanic (Automotive Sector)', 'Rubber technician(Rubber industry Sector)',
    'Drone Technician (Aerospace and Aviation Sector)', 'IoT Technician (Smart Agriculture)(IT & ITES Sector)',
    'Electronics BBBT & Repaired Maintenance of electronic test equipment(Electronics (COE) Sector)',
    'Electronics BBBT & Repaired Maintenance of electronic test equipment(Electronics (COE) Sector)', 'Electroplator(Chemicals And Petrochemicals Sector)',
    'Bachelor Of Theology','Plastic Processing Operator (Chemicals And Petrochemicals Sector)',
    'Attendant Operator(Chemical Plant)(Chemicals And Petrochemicals Sector)',
    'BBBT Only Passed(Agriculture Machinery (COE) Sector)','Fabrication BBBT & Pressure Vessel & Pipe Welding(Fabrication (COE) Sector)',
    'Fabrication BBBT & Tig & Mig Welding(Fabrication (COE) Sector)','Fabrication BBBT & Structural / Pressure Parts Fitting(Fabrication (COE) Sector)',
    'Fabrication BBBT & Structural Welding(Fabrication (COE) Sector)','BBBT Only Passed(Fabrication (COE) Sector)',
    'Fabrication BBBT & Welding Inspection & testing(Fabrication (COE) Sector)'
]
# Replace specific values in 'Qualification' column with 'Mechanics and Electronics'
data['Qualification'] = data['Qualification'].apply(lambda x: 'Mechanics and Electronics' if x in values else x)

# List of all values to group into Media and Communication
media_values = [
        'Video Cameraman(Media & Entertainment Sector)', 'Bachelor Of Mass Communication Journalism',
        'Bachelor Of Multimedia Communication','Master Of Communication and Journalism',
        'Bachelor Of Visual Communication','Bachelor Of Communication and Journalism',
        'Bachelor Of Communication and Media Journalism','Master Of Journalism and communication',
        'Master Of Arts In Media Management', 'Bachelor Of Journalism and Mass Communication',
        'Bachelor Of Journalism', 'Digital Photographer (Media & Entertainment Sector)',
        'Multimedia Animation & Special Effects (IT & ITES Sector)','Telephone Exchange Operator',
        'Master Of Journalism and media communication','IT Sector BBBT & Digital Videography(IT Sector (COE) Sector)',
        'IT Sector BBBT & Multimedia & Animation(IT Sector (COE) Sector)','Master Of Journalism',
        'Photographer (Media & Entertainment Sector)','Bachelor Of Journalism and Communication',
        'AICWA']

#Replace specific values in 'Qualification' column with 'Media and Communication'
data['Qualification'] = data['Qualification'].apply(lambda x: 'Media and Communication' if x in media_values else x)

# List of all values to group into Fashion and Textile Design
fashion_textile_values = [
        'Apparel BBBT & Fashion Designing(Apparel (COE) Sector)', 'Dress Making (Apparel Sector)',
        'Bachelor Of Design', 'Cutting & Sewing (Visually impaired) (Apparel Sector)','Master Of Fashion Designing',
        'Master Of Design', 'Footwear maker (Leather Sector)', 'Cosmetology (Beauty and Wellness Sector)',
        'Textile Wet Processing Technician (Textile & Handloom Sector)',
        'Hair & Skin Care (Visually Impaired) (Beauty and Wellness Sector)','Surface Ornamentation Techniques (Embroidery) (Apparel Sector)',
        'Sewing Technology (Apparel Sector)']

#Replace specific values in 'Qualification' column with Fashion & Textile Design
data['Qualification'] = data['Qualification'].apply(lambda x: 'Fashion and Textile Design' if x in fashion_textile_values else x)

#List of all values to group into Business Administration and Management
business_values = ['Master Of Business Administration','Bachelor Of Business Management',
                  'Master Of Business Management', 'Bachelor Of Management Studies',
                  'Business Administration and Management', 'Bachelor Of Business Studies',
                  'Master of Management Studies', 'Master in Marketing Management',
                  'Master Of International Business', 'Hospitality Sector BBBT & Front Office(Hospitality Sector (COE) Sector)',
                  'Master Of Mgmnt. In Hospitality','Doctorate In Management',
                   'Marketing Executive (Office Administration & Facility Management Sector)','Master Of Finance and Control',
                   'Master Of financial management','Bachelor Of Business Administration']
#Replace specific values in 'Qualification' column with Business Administration and Management
data['Qualification'] = data['Qualification'].apply(lambda x: 'Business Administration and Management' if x in business_values else x)

#List of all values to group into SSLC
SSLC_values = ['CBSE(10th)','SSLC O Level', 'Fashion Design & Technology (Apparel Sector)',
               'SSSC','JTSLC','ICSE (10th)','THSLC','THSLC For Special School','THSLC For Special School',
                'SSLCNew Scheme', 'SSLC A Level', 'HSLC','Tenth Equivalency','AHSLC','SSLC For Deaf','AISSE']
#Replace specific values in 'Qualification' column with SSLC
data['Qualification'] = data['Qualification'].apply(lambda x: 'SSLC' if x in SSLC_values else x)

#List of all values to group into Tourism and Hospitality
Tourism_values = ['Front Office Assistant (Tourism and Hospitality Sector)','Hospital House Keeping (Tourism and Hospitality Sector)',
              'Travel & Tour Assistant (Tourism and Hospitality Sector)','Bachelor Of Travel And Tourism Management',
              'Food & Beverages Services Assistant (Tourism & Hospitality Sector)','Hospitality Sector BBBT & Food & Beverage Service(Hospitality Sector (COE) Sector)',
              'Bachelor Of Tourism Studies', 'Bachelor Of Tourism and Hotel Management','Tourism BBBT & Hospitality Management(Tourism (COE) Sector)',
              'Master Of Tourism and Travel Management','Master Of Hospital Administration',
               'Master Of Tourism Administration','Caterig And Hospitality Assistant (Tourism and Hospitality Sector)',
              'Hospitality Sector BBBT & Food Procuction(Hospitality Sector (COE) Sector)', 'Tourism BBBT & Eco - Tourism(Tourism (COE) Sector)',
              'Tourist Guide (Tourism and Hospitality Sector)','BBBT Only Passed(Hospitality Sector (COE) Sector)',
              'House Keeper (Tourism and Hospitality Sector)','Tourism BBBT & Tour & Travel Management(Tourism (COE) Sector)',
              'Bachelor Of Hotel Management','I.A.T.A.']

#Replace specific values in 'Qualification' column with Tourism and Hospitality
data['Qualification'] = data['Qualification'].apply(lambda x:'Tourism and Hospitality' if x in Tourism_values else x)

# Get unique values containing 'Manufacturing'
Manufacturing_values = data[data['Qualification'].str.contains('Manufacturing', case=False, na=False)]['Qualification'].unique()

print(Manufacturing_values)

# Replace any value containing 'Manufacturing' with 'Manufacturing Sector'
data['Qualification'] = data['Qualification'].apply(lambda x: 'Manufacturing' if x in Manufacturing_values else x)

# Replace values containing "Law" with "Law Stream"
data['Qualification'] = data['Qualification'].apply(lambda x: 'Law Stream' if 'Law' in str(x) else x)

# Replace values containing "Engineering" with "Engineering Stream"
data['Qualification'] = data['Qualification'].apply(lambda x: 'Engineering Stream' if 'Engineering' in str(x) else x)

# Replace values containing "Technology" with "Technology Stream"
data['Qualification'] = data['Qualification'].apply(lambda x: 'Technology Stream' if 'Technology' in str(x) else x)

#List of all values to group into 12th Pass Out
twelth_values = ['VHSE', 'HSC (Plus2)','CBSE12th', 'Twelfth Equivalency','Bachelor Of Vocational Education',
                'AHSS (12th)','VSHSE', 'HSSC','ICSE (12th)','ISC (Indian School Certificate)',
                'ISC (Indian School Certificate)','PDC','Intermediate']
#Replace values related to twelth in 'Qualification' column with 12th Pass Out
data['Qualification'] = data['Qualification'].apply(lambda x:'12th Pass Out' if x in twelth_values else x)

#List of all values to group into Architectural Stream
architectural_values = [ 'Architectural Draughtsman (Construction Sector)','Bachelor Of Architecture',
                        'Interior Design & Decoration (Construction Sector)', 'Bachelor Of Architecture',
                       'Interior Design & Decoration (Construction Sector)','Master Of Housing',
                         'Bachelor Of Interior Design (Bid)','Master Of Architecture',]
#Replace values related to architecture in 'Qualification' column with Architectural Stream
data['Qualification'] = data['Qualification'].apply(lambda x:'Architectural Stream' if x in architectural_values else x)

#List of all values in the group of Food Processing and Agro tech
food_agro_values= ['Agro Processing (Food Industry Sector)','Food Production (General) (Food Industry Sector)',
                    'Milk & Milk Product Technician (Food Industry Sector)''Food Beverage (Food Industry Sector)','Horticulture (Agriculture Sector)',
                   'BBBT Only Passed(Food Processing (COE) Sector)','Baker and Confectioner (Food Industry Sector)',
                   'Craftsman Food Production (Vegetarian)(Food Industry Sector)','Dairying(Food Industry Sector)','Food Beverage (Food Industry Sector)']
#Replace values related to food an dairy in 'Qualification' column with Food Processing and Agro tech
data['Qualification'] = data['Qualification'].apply(lambda x:'Food Processing and Agro tech' if x in food_agro_values else x)

#List of all values in the group of construction Stream
Construction_values= ['Agro Processing (Food Industry Sector)','Food Production (General) (Food Industry Sector)',
                      'Milk & Milk Product Technician (Food Industry Sector)', 'Surveyor (Construction Sector)', 'Civil EngineerIing Assistant (Construction Sector)',
                      'Painter (General) (Construction Sector)','Carpenter (Construction Sector)','Architectural Assistant (Construction Sector)',
                      'Construction & Wood Working BBBT & Form Work in Construction(Construction & Wood Working (COE) Sector)',
                      'Construction & Wood Working BBBT & Wood Work in Construction(Construction & Wood Working (COE) Sector)','BBBT Only Passed(Construction & Wood Working (COE) Sector)',
                      'Construction & Wood Working BBBT & Modern Construction Techniques & Management(Construction & Wood Working (COE) Sector)']

data['Qualification'] = data['Qualification'].apply(lambda x:'Construction Stream' if x in Construction_values else x)

#List of all values in the group of Physical Education
physical_education_values= ['Master Of Physical Education and Sports','Master Of Physical Education']

data['Qualification'] = data['Qualification'].apply(lambda x:' Physical Education' if x in physical_education_values else x)

#List of all values in the group of Arabic Stream
arabic_values= ['Afsal-Ul-Ulama (Final)', 'AfzalUlUlama (Preliminary)', 'AdibEFazil (Preliminary)',
  'Adib-E-Fazil (Final)','Muthaqassis Al Adab']

data['Qualification'] = data['Qualification'].apply(lambda x:'Arabic Stream' if x in arabic_values else x)

#List of all values in the group of Bachelor of Education (B.Ed)
bed_values= ['Early Childhood Educator(Education,Training & Research Sector)','Siksha Visarad','Bachelor Of Education In Shiksha Shastri (Skt)',
              'Prak Sashtry (Skt)','Shiksha Snatak (Hindi)','Shikshan Nishant (Hindi)']
data['Qualification'] = data['Qualification'].apply(lambda x:'Bachelor of Education (B.Ed)' if x in bed_values else x)

# Replace "SSC" and "PUSC" with "SSC and PUSC"
data['Qualification'] = data['Qualification'].replace(['SSC', 'PUSC'], 'SSC and PUSC')

#List of all values in the group of Vocational Program
vocational_values= ['Master Of Vocation','Post ITI']
data['Qualification'] = data['Qualification'].apply(lambda x:'Vocational Program' if x in vocational_values else x)

#List of all values in the group of Graduation and Post graduation
Grad_values= ['Post P.G.Certificate','Graduation Certificate (Ex-Service)','Matriculation Certificate (ExService)',
              'Postgraduate certificate']
data['Qualification'] = data['Qualification'].apply(lambda x:'Graduation and Post graduation' if x in Grad_values else x)

#List of all values in the group of Statistics and Logistics
stat_values= ['Master Of Statistics','In plant Logistics Assistant(Logistics Sector)','Warehouse Technician (Logistics Sector)']
data['Qualification'] = data['Qualification'].apply(lambda x:'Statistics and Logistics' if x in stat_values else x)

#List of all values to group into Office Administration and Facility Management
adm_values= ['Stenographer & Secretarial Assistant (Hindi) (Office Administration & Facility Management(*) Sector)',
             'Stenographer & Secretarial Assistant (English) (Office Administration & Facility Management Sector)',
             'Secretarial Practice (English) (Office Administration & Facility Management Sector)']
data['Qualification'] = data['Qualification'].apply(lambda x:'Office Administration and Facility Management' if x in adm_values else x)

# Define the number of top values to display
top_n = 60
top_values = data['Qualification'].value_counts().nlargest(top_n).index

plt.figure(figsize=(18,10))
ax = sns.countplot(data=data[data['Qualification'].isin(top_values)], x='Qualification',
                   order=top_values)
plt.xticks(rotation=90)

for p in ax.patches:
    ax.annotate(f'{int(p.get_height())}',
                (p.get_x() + p.get_width() / 2, p.get_height()),
                ha='center',
                va='bottom',
                fontsize=12,
                rotation=90)
plt.show()

# Count the frequency of each value in the 'Qualification' column
value_counts = data['Qualification'].value_counts()

# Filter to get values with occurrences less than or equal to 10
less_than_or_equal_10 = value_counts[value_counts <= 10]

# Display the values and their counts
print("Values with occurrences less than or equal to 10:")
print(less_than_or_equal_10)

# Identify values in 'Qualification' with occurrences less than or equal to 10
values_to_replace = less_than_or_equal_10.index

# Replace those values with 'Others'
data['Qualification'] = data['Qualification'].replace(values_to_replace, 'Others')

data.Qualification.value_counts()

#Considering the column 'Skills'

data.Skills.value_counts()

data.Skills.nunique()

"""To treat values like 'NO', 'Nil', 'Skills*', 'Nill', 'No Skill',  as missing (null) and handle them accordingly, you can convert these values to NaN and then proceed with the usual imputation  process."""

# Replace specified values with NaN
data['Skills'] = data['Skills'].replace({
    'NO': np.nan,
    'Nil': np.nan,
    'Skills*': np.nan,
    'Nill': np.nan,
    'No Skill': np.nan,
    'nothing': np.nan,
    'no skills': np.nan,
    'skills': np.nan,
    'no': np.nan
})

data.isna().sum()

"""Here it is visible after replacing those values into 'nan', it is found that there are missing values in the column , so lets remove those missing values by imputing method."""

data['Skills']=data['Skills'].fillna(data['Skills'].mode()[0])

#verify
data.isna().sum()

# Define the number of top values to display
top_n = 80
top_values = data['Skills'].value_counts().nlargest(top_n).index

plt.figure(figsize=(18,10))
ax = sns.countplot(data=data[data['Skills'].isin(top_values)], x='Skills',
                   order=top_values)
plt.xticks(rotation=90)

for p in ax.patches:
    ax.annotate(f'{int(p.get_height())}',
                (p.get_x() + p.get_width() / 2, p.get_height()),
                ha='center',
                va='bottom',
                fontsize=12,
                rotation=90)

plt.show()

skill_counts = data['Skills'].value_counts()

# Step 2: Filter values whose occurrence is between 30 and 50
filtered_skills = skill_counts[(skill_counts >= 30) & (skill_counts <= 50)]

# Step 3: Plot the results
plt.figure(figsize=(10, 6))
filtered_skills.plot(kind='bar')
plt.title('Skills with Occurrence Between 30 and 50')
plt.xlabel('Skills')
plt.ylabel('Count')
plt.xticks(rotation=90, ha='right')
plt.tight_layout()
plt.show()

# Filter for skills with occurrences between 10 and 30
unique_skills = skill_counts[(skill_counts >= 10) & (skill_counts <= 30)].index

print("Skills with occurrences between 10 and 30:")
for skill in unique_skills:
    print(skill)

# Step 1: Normalize text - lowercase and strip whitespace
data['Skills'] = data['Skills'].str.lower().str.strip()

data.Skills.value_counts()

# Keywords to look for
keywords = [
    'communication', 'leadership', 'speaking', 'writing', 'dancing', 'music',
    'cooking', 'writer', 'social work', 'communicative skill', 'hardwork',
    'critical thinking', 'quick learner', 'problem solving', 'teamwork',
    'fast learner', 'drowning', 'self confidence', 'good listener', 'reading',
    'learning', 'fast learning', 'drawing skill', 'leadership skills',
    'language skill', 'speech', 'working', 'craft', 'playing', 'photographer',
    'malayalam', 'social service', 'cammunication', 'gamer', 'english','volunteering','posetive mind',
    'talk active','event management','communicatiln skills','ability to work in a team','commucation',
    'interpersonal skills','data entry','time management','tailoring','singing','driver','dance','team work',
    'hard work','creativity','strong work ethic','typing skill','stitching','auto cad'

]

# Convert keywords to lowercase for matching
keywords = [word.lower() for word in keywords]

# Filter unique skills that contain any of the keywords
matching_skills = data['Skills'].unique()
matching_skills = [skill for skill in matching_skills if any(keyword in skill.lower() for keyword in keywords)]

# Print the matching unique skills
print("Unique skills containing specified keywords:")
for skill in matching_skills:
    print(skill)

data['Skills'] = data['Skills'].apply(lambda skill: 'Interpersonal Skills' if any(keyword in skill.lower() for keyword in keywords) else skill)

teaching_keywords = ['teaching', 'teacher']

# Convert keywords to lowercase for matching
teaching_keywords = [word.lower() for word in teaching_keywords]

# Update skills containing 'teaching' or 'teacher' to 'Teaching Skill'
data['Skills'] = data['Skills'].apply(lambda skill: 'Teaching Skill' if any(keyword in skill.lower() for keyword in teaching_keywords) else skill)

comp_keywords = ['computer','programming','angular','react','windows','postman','git','mongodb','vs code','sublime text','css',
                 'api','json server','html','ms office','sql','python','excel','programing in c',
                 'autocad','dca','coding','accounts','dtp','iti','programing','typing' ]

# Convert keywords to lowercase for matching
comp_keywords = [word.lower() for word in comp_keywords]

data['Skills'] = data['Skills'].apply(lambda skill: 'Computer and Programming Language' if any(keyword in skill.lower() for keyword in comp_keywords) else skill)

# Convert keywords to lowercase for matching
comp_keywords = [word.lower() for word in comp_keywords]

data['Skills'] = data['Skills'].apply(lambda skill: 'Computer and Programming Language' if any(keyword in skill.lower() for keyword in comp_keywords) else skill)

elec_keywords = ['electronics']

# Convert keywords to lowercase for matching
elec_keywords = [word.lower() for word in elec_keywords]

data['Skills'] = data['Skills'].apply(lambda skill: 'Electronics' if any(keyword in skill.lower() for keyword in elec_keywords) else skill)

draw_keywords = ['drawing','architecture']

# Convert keywords to lowercase for matching
draw_keywords = [word.lower() for word in draw_keywords]

data['Skills'] = data['Skills'].apply(lambda skill: 'Architecture' if any(keyword in skill.lower() for keyword in draw_keywords) else skill)

acc_keywords = ['accounting','finance','tally','b. come with taxation','bcom']

# Convert keywords to lowercase for matching
acc_keywords = [word.lower() for word in acc_keywords]

data['Skills'] = data['Skills'].apply(lambda skill: 'Accounting and Finance' if any(keyword in skill.lower() for keyword in acc_keywords) else skill)

eng_keywords = ['engineer']

# Convert keywords to lowercase for matching
eng_keywords = [word.lower() for word in eng_keywords]

data['Skills'] = data['Skills'].apply(lambda skill: 'Engineering Skill' if any(keyword in skill.lower() for keyword in eng_keywords) else skill)

mech_keywords = ['electrics','inventory','manufacture','automobile','car','tyre works','auto electrician',
                 'welding','plumber','mechanical','mechanic','plumbing','wiring','welder','fitter',
                 'electrician'
]
# Convert keywords to lowercase for matching
mech_keywords = [word.lower() for word in mech_keywords ]

data['Skills'] = data['Skills'].apply(lambda skill: 'Mechanics' if any(keyword in skill.lower() for keyword in mech_keywords) else skill)

tech_keywords = ['technical skill','technical skills','technician','technical'
 ]
# Convert keywords to lowercase for matching
tech_keywords = [word.lower() for word in tech_keywords]

data['Skills'] = data['Skills'].apply(lambda skill: 'Business and Marketing' if any(keyword in skill.lower() for keyword in tech_keywords) else skill)

mark_keywords = ['market','business','sales','marketing','management skill']
# Convert keywords to lowercase for matching
mark_keywords = [word.lower() for word in mark_keywords]

data['Skills'] = data['Skills'].apply(lambda skill: 'Business and Marketing' if any(keyword in skill.lower() for keyword in mark_keywords) else skill)

analyst_keywords = ['data science','analysis','analyst']
# Convert keywords to lowercase for matching
analyst_keywords= [word.lower() for word in analyst_keywords]

data['Skills'] = data['Skills'].apply(lambda skill: 'Analyst' if any(keyword in skill.lower() for keyword in analyst_keywords) else skill)

med_keywords = ['nurse','nursing','musculoskeletal physiotherapy',
                'ortho rehabilitation','pediatric physiotherapy','neuro rehabilitation',
                'physiotherapy','myofascial release','medical scribing','medical coding',
                'lab technician']
# Convert keywords to lowercase for matching
med_keywords= [word.lower() for word in med_keywords]

data['Skills'] = data['Skills'].apply(lambda skill: 'Medical' if any(keyword in skill.lower() for keyword in med_keywords) else skill)

# Count the frequency of each value in the 'Skills' column
value_counts = data['Skills'].value_counts()

# Filter to get values with occurrences less than or equal to 1less_than_or_equal_20 = value_counts[value_counts <= 1]
less_than_or_equal_1 = value_counts[value_counts <= 1]
# Display the values and their counts
print("Values with occurrences less than or equal to 1:")
print(less_than_or_equal_1)

# Step 1: Count the frequency of each value in the 'Skills' column
value_counts = data['Skills'].value_counts()

# Step 2: Filter values with occurrences less than or equal to 30
less_than_or_equal_50 = value_counts[value_counts <= 50].index

# Step 3: Define a function to categorize each value
def categorize_skills(skill):
    if skill in less_than_or_equal_50:
        # Count the number of comma-separated skills in each value
        if skill.count(',') >= 2:  # 2 commas mean 3 or more skills
            return 'Multiskills'
        else:
            return 'Others'
    else:
        return skill  # Keep values with occurrences more than 30 unchanged

# Step 4: Apply the categorization function to the 'Skills' column
data['Skills'] = data['Skills'].apply(categorize_skills)

# Display the updated 'Skills' column with grouped categories
print("Updated 'Skills' column with categorized values:")
print(data['Skills'].value_counts())

# Group 'football' and 'sports' into 'Sports'
data['Skills'] = data['Skills'].replace({
    'football': 'Sports',
    'sports': 'Sports'
})

data.Skills.value_counts()

# Step 1: Replace 'no' with NaN
data['Skills'] = data['Skills'].replace('no', np.nan)

data.isna().sum()

data['Skills']=data['Skills'].fillna(data['Skills'].mode()[0])

data.isna().sum()

#VERIFY
data.Skills.value_counts()

#Consider the column 'Age'
data.Age.value_counts()

top_n = 70
top_values = data['Age'].value_counts().nlargest(top_n).index

plt.figure(figsize=(18, 10))

ax = sns.countplot(data=data[data['Age'].isin(top_values)], x='Age',
                   order=top_values, color='#006400')
plt.xticks(rotation=90)


for p in ax.patches:
    ax.annotate(f'{int(p.get_height())}',
                (p.get_x() + p.get_width() / 2, p.get_height()),
                ha='center',
                va='bottom',
                fontsize=12,
                rotation=90)

plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(data=data, x='Age', color='skyblue')
plt.title('Box Plot of Age')
plt.show()

#Handling outliers in Age column using IQR
q1=data['Age'].quantile(0.25)
q2=data['Age'].quantile(0.5)
q3=data['Age'].quantile(0.75)

print(q1,q2,q3)

iqr=q3-q1
LL=q1-(1.5*iqr)
UL=q3+(1.5*iqr)

outlier=data[(data['Age']<LL)|(data['Age']>UL)].index

data.drop(outlier, inplace=True)

sns.boxplot(y=data['Age'])
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(data['Age'], bins=30, color='purple', kde=True)
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency / Density')
plt.show()

data.head()

data.shape

# Save the cleaned dataset to a CSV file
data.to_csv('/content/cleaned_dataset.csv', index=False)

# Optional: Download the CSV file to your local machine
from google.colab import files
files.download('/content/cleaned_dataset.csv')

